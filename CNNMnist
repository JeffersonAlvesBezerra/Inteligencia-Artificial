{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CNN Mnist","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMCwyN3TY5MleZRtBez4egI"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"8AND0NyOg0QI"},"source":["!pip install keras\n","!pip install tensorflow\n","!pip install torch"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"el6X2gFYhIGv"},"source":["from keras.datasets import mnist\n","#Baixar de Keras, dataset de números escritos a mão \n","(X_train, y_train), (X_test, y_test) = mnist.load_data()\n","import matplotlib.pyplot as plt\n","#plot a primeira imagem no conjunto de dados \n","plt.imshow (X_train [0])\n","X_train.shape\n","#Checar o tamanho da imagem (Pixels)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k3daXwVEhiQA"},"source":["#reshape os dados para ajustar o modelo \n","X_train = X_train.reshape (60000,28,28,1) \n","X_test = X_test.reshape (10000,28,28,1)\n","#X_train.reshape(número de imagens para treino,dimensões da imagem, 1 pois está em escala de cinza)\n","from keras.utils import to_categorical\n","# coluna de destino de codificação one-hot \n","y_train = to_categorical (y_train) \n","y_test = to_categorical (y_test)\n","#Padronizando a saída dos dados, onde criamos um array de 10 dimensões e a casa que corresponder com o número escrito receberá \"1\" e as outras \"0\"\n","#y_train [0]\n","from keras.models import Sequential\n","from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D\n","#create model\n","model = Sequential()\n","#add model layers\n","model.add(Conv2D(64, kernel_size=3, activation='relu', input_shape=(28,28,1)))\n","model.add(MaxPooling2D())\n","model.add(Conv2D(32, kernel_size=3, activation='relu'))\n","model.add(MaxPooling2D())\n","model.add(Flatten())\n","model.add(Dense(10, activation='softmax'))\n","from sklearn.metrics import confusion_matrix\n","#compile model using accuracy to measure model performance\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","#treinar o modelo (épocas = número de vezes que o modelo percorrerá o conjunto de dados)\n","model.fit (X_train, y_train, validation_data = (X_test, y_test), epochs = 4)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"83n6PdN5ihpf","colab":{"base_uri":"https://localhost:8080/","height":311},"executionInfo":{"status":"ok","timestamp":1613776517898,"user_tz":180,"elapsed":300710,"user":{"displayName":"Jefferson Bezerra","photoUrl":"","userId":"13030824617032701042"}},"outputId":"1a6f997d-55c8-478c-c9ab-7bf42a6dcae0"},"source":["import numpy as np\n","def plot_confusion_matrix(cm, classes,\n","                          normalize=False,\n","                          title='Matriz de Confusão',\n","                          cmap=plt.cm.Blues):\n","    \"\"\"\n","    This function prints and plots the confusion matrix.\n","    Normalization can be applied by setting `normalize=True`.\n","    \"\"\"\n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","    tick_marks = np.arange(len(classes))\n","    plt.xticks(tick_marks, classes, rotation=45)\n","    plt.yticks(tick_marks, classes)\n","\n","    if normalize:\n","        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","\n","    thresh = cm.max() / 2.\n","    #for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","    for i in range (cm.shape[0]):\n","      for j in range (cm.shape[1]):\n","          plt.text(j, i, cm[i, j],\n","                 horizontalalignment=\"center\",\n","                 color=\"white\" if cm[i, j] > thresh else \"black\")\n","\n","    plt.tight_layout()\n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label')\n","\n","# Predict the values from the validation dataset\n","Y_pred = model.predict(X_test)\n","# Convert predictions classes to one hot vectors \n","Y_pred_classes = np.argmax(Y_pred,axis = 1) \n","# Convert validation observations to one hot vectors\n","Y_true = np.argmax(y_test,axis = 1) \n","# compute the confusion matrix\n","confusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n","# plot the confusion matrix\n","plot_confusion_matrix(confusion_mtx, classes = range(10)) "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"yaDnCvxyiit2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613776517899,"user_tz":180,"elapsed":300703,"user":{"displayName":"Jefferson Bezerra","photoUrl":"","userId":"13030824617032701042"}},"outputId":"8f05721b-56ec-4455-b9d4-7bf1b7788c8a"},"source":["#predict primeiras 4 imagens no conjunto de teste \n","model.predict (X_test [: 4])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[3.4246274e-14, 2.6211506e-13, 2.3543096e-06, 7.7036464e-07,\n","        5.5193281e-16, 1.6506341e-13, 4.8720323e-17, 9.9999690e-01,\n","        1.0130004e-09, 2.6756578e-10],\n","       [1.3823406e-10, 2.7368324e-05, 9.9997258e-01, 5.7216512e-09,\n","        1.6445439e-14, 2.8467547e-16, 8.3738716e-10, 4.6012323e-16,\n","        9.2825601e-11, 5.6938481e-16],\n","       [6.1390200e-09, 9.9997234e-01, 4.7298676e-07, 8.6441936e-08,\n","        6.5452659e-06, 8.2741252e-08, 3.7984753e-07, 8.5563688e-06,\n","        9.0240901e-06, 2.4075978e-06],\n","       [9.9962771e-01, 1.3677062e-07, 9.1687471e-06, 1.1257195e-09,\n","        9.8569268e-09, 1.8652848e-09, 3.2252868e-04, 3.1998681e-09,\n","        1.3726966e-05, 2.6676049e-05]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"9w6nznTdiscW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613776517899,"user_tz":180,"elapsed":300692,"user":{"displayName":"Jefferson Bezerra","photoUrl":"","userId":"13030824617032701042"}},"outputId":"3db379a9-c471-4073-ca84-6ffcf336aed3"},"source":["y_test[: 4]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],\n","       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0.]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":8}]}]}